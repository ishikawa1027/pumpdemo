<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<jsCheckOption>
<!-- ****************** Environments ***************** -->
    <jsHintOption type="java.lang.Boolean" key="browser">
        <state>false</state>
        <description>標準ブラウザでの実行を想定(documentやwindow等、のグローバル変数が事前に定義されているか.)</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="jquery">
        <state>true</state>
        <description>jQueryでの実行を想定(jQueryのグローバル変数が事前に定義されているか.)</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="couch">
        <state>false</state>
        <description>CouchDBでの実行を想定(CouchDBのグローバル変数が事前に定義されているか.)</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="es5">
        <state>false</state>
        <description>es5での実行を想定(es5の文法を使用してもよいか.)</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="devel">
        <state>false</state>
        <description>alert、confirm、console、Debug、opera、promptを使用してもよいか</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="node">
        <state>false</state>
        <description>node.jsでの実行を想定(node.jsのグローバル変数が事前に定義されているか.)</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="rhino">
        <state>false</state>
        <description>Rhinoでの実行を想定(Rhinoのグローバル変数が事前に定義されているか.)</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="prototypejs">
        <state>false</state>
        <description>prototype.jsでの実行を想定(prototype.jsのグローバル変数が事前に定義されているか.)</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="mootools">
        <state>false</state>
        <description>mootoolsでの実行を想定(mootoolsのグローバル変数が事前に定義されているか.)</description>
        <detail></detail>
    </jsHintOption>
<!-- ****************** Oprions ***************** -->    
    <jsHintOption type="java.lang.Boolean" key="asi">
        <state>false</state>
        <description>セミコロンの未挿入を許容.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="bitwise">
        <state>true</state>
        <description>ビット演算子の仕様を禁止.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="boss">
        <state>false</state>
        <description>構造化要素の中身の割り当てを許容.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="curly">
        <state>true</state>
        <description>構造化要素内の中括弧未使用を禁止.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="debug">
        <state>false</state>
        <description>debuggerキーワードを許容.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="eqeqeq">
        <state>false</state>
        <description>===か!==以外の比較を禁止.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="eqnull">
        <state>true</state>
        <description>== null を許容.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="evil">
        <state>false</state>
        <description>eval関数を許容.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="forin">
        <state>true</state>
        <description>hasOwnPropertyメソッドでチェックを行っていない場合のfor inを禁止.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="immed">
        <state>true</state>
        <description>括弧で括られた範囲の、即時実行を要求する.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="laxbreak">
        <state>false</state>
        <description>改行をチェックしない.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Integer" key="maxerr">
        <state>true</state>
        <value>1000</value>
        <description>許容するエラーの最大数(指定なし：50個)</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="newcap">
        <state>true</state>
        <description>コンストラクタ名の最初の文字の大文字チェック.</description>
        <detail>(注意)JSHINTは、コンストラクタの定義の所で名前のチェックをしていない。&#xD;
 newでコンストラクタを呼ぶ所で名前をチェックしているので、小文字だった場合は&#xD;
 その行を指摘される。</detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="noarg">
        <state>true</state>
        <description>arguments.caller と　arguments.calleeの使用を禁止.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="noempty">
        <state>true</state>
        <description>空ブロックの禁止.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="nonew">
        <state>true</state>
        <description>副作用のあるコンストラクタの使用を禁止.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="nomen">
        <state>false</state>
        <description>名前の先頭または末尾のアンダーバーを禁止.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="onevar">
        <state>false</state>
        <description>1つの関数で2つ以上のvarステートメントの使用を禁止.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="passfail">
        <state>false</state>
        <description>1個目のエラーでチェックをを止める.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="plusplus">
        <state>false</state>
        <description> インクリメント(++)・デクリメント(--)を使用を禁止.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="regexp">
        <state>false</state>
        <description>正規表現の . (任意の1文字)と [^...] (指定した文字以外)の使用禁止</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="undef">
        <state>true</state>
        <description>変数または関数の宣言があるかをチェックする</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="sub">
        <state>false</state>
        <description>オブジェクトのプロパティへのアクセスは、ドットではなくて括弧記法を許容.</description>
        <detail>ドット演算子(dot notation): sample.aaa&#xD;
 括弧記法(subscript notation): sample['aaa']</detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="strict">
        <state>false</state>
        <description>'use strict' の未使用を禁止.</description>
        <detail></detail>
    </jsHintOption>
    <jsHintOption type="java.lang.Boolean" key="white">
        <state>true</state>
        <description>いい加減な空白をチェック.</description>
        <detail></detail>
    </jsHintOption>
    
</jsCheckOption>
